name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Set release version
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_type }}" == "tag" ]; then
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        else
          echo "RELEASE_VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV
        fi
        
    - name: Build all modules
      run: |
        mvn clean compile -pl fxgl-core -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-io -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-entity -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-scene -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-gameplay -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-controllerinput -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-intelligence -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-tools -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        
    - name: Package individual module JARs
      run: |
        mvn clean package -pl fxgl-core -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-io -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-entity -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-scene -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-gameplay -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-controllerinput -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-intelligence -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-tools -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        
    - name: Create all-in-one JAR
      run: |
        mvn clean package -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        
    - name: Prepare release artifacts
      run: |
        mkdir -p release-artifacts
        
        # Copy individual module JARs
        find . -name "fxgl-core-*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-io-*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-entity-*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-scene-*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-gameplay-*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-controllerinput-*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-intelligence-*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-tools-*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-test-*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-zdeploy-*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        
        # Copy all-in-one JAR
        find . -name "fxgl-[0-9]*.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/fxgl-all-in-one-${RELEASE_VERSION}.jar \;
        
        # List all artifacts for verification
        ls -la release-artifacts/
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.RELEASE_VERSION }}
        release_name: FXGL v${{ env.RELEASE_VERSION }}
        body: |
          ## FXGL Java 17 Compatible Release v${{ env.RELEASE_VERSION }}
          
          ### All-in-One JAR
          - `fxgl-all-in-one-${{ env.RELEASE_VERSION }}.jar` - Complete FXGL framework in a single JAR
          
          ### Individual Module JARs
          - `fxgl-core-${{ env.RELEASE_VERSION }}.jar` - Core framework utilities
          - `fxgl-entity-${{ env.RELEASE_VERSION }}.jar` - Entity-Component-System and physics
          - `fxgl-io-${{ env.RELEASE_VERSION }}.jar` - Input/output and networking
          - `fxgl-scene-${{ env.RELEASE_VERSION }}.jar` - UI components and scene management
          - `fxgl-gameplay-${{ env.RELEASE_VERSION }}.jar` - High-level game features
          - `fxgl-controllerinput-${{ env.RELEASE_VERSION }}.jar` - Game controller support
          - `fxgl-intelligence-${{ env.RELEASE_VERSION }}.jar` - AI and pathfinding
          - `fxgl-tools-${{ env.RELEASE_VERSION }}.jar` - Development tools
          - `fxgl-test-${{ env.RELEASE_VERSION }}.jar` - Testing utilities
          - `fxgl-zdeploy-${{ env.RELEASE_VERSION }}.jar` - Deployment utilities
          
          ### Java 17 Compatibility
          This release is fully compatible with Java 17 LTS while maintaining API compatibility with the original FXGL framework.
          
          ### Usage
          Include the all-in-one JAR in your project or select individual modules as needed.
        draft: false
        prerelease: false
        
    - name: Upload All-in-One JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/fxgl-all-in-one-${{ env.RELEASE_VERSION }}.jar
        asset_name: fxgl-all-in-one-${{ env.RELEASE_VERSION }}.jar
        asset_content_type: application/java-archive
        
    - name: Upload Individual Module JARs
      run: |
        for jar in release-artifacts/*.jar; do
          if [[ "$jar" != *"all-in-one"* ]]; then
            filename=$(basename "$jar")
            echo "Uploading $filename..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/java-archive" \
              --data-binary @"$jar" \
              "${{ steps.create_release.outputs.upload_url }}?name=$filename"
          fi
        done