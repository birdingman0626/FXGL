name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Set release version
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_type }}" == "tag" ]; then
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        else
          echo "RELEASE_VERSION=${{ github.event.inputs.release_version }}" >> $GITHUB_ENV
        fi
        
    - name: Build all modules
      run: |
        mvn clean compile -pl fxgl-core -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-io -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-entity -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-scene -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-gameplay -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-controllerinput -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-intelligence -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl-tools -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean compile -pl fxgl -am -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        
    - name: Package individual module JARs
      run: |
        mvn clean package -pl fxgl-core -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-io -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-entity -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-scene -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-gameplay -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-controllerinput -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-intelligence -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl-tools -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        mvn clean package -pl fxgl -am -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        
    - name: Create all-in-one JAR
      run: |
        mvn clean package -DskipTests=true -Dgpg.skip=true -Dlicense.skip=true -Dpmd.skip=true
        
    - name: Prepare release artifacts
      run: |
        mkdir -p release-artifacts
        
        # Copy individual module JARs (excluding sources, javadoc, and uber JARs)
        find . -name "fxgl-core-*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*uber*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-io-*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*uber*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-entity-*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*uber*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-scene-*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*uber*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-gameplay-*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*uber*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-controllerinput-*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*uber*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-intelligence-*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*uber*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-tools-*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*uber*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-test-*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*uber*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        find . -name "fxgl-zdeploy-*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*uber*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/ \;
        
        # Copy all-in-one JAR (look for the uber JAR specifically)
        find . -name "fxgl-*-uber.jar" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/fxgl-all-in-one-${RELEASE_VERSION}.jar \;
        
        # If uber JAR not found, try the regular fxgl JAR
        if [ ! -f "release-artifacts/fxgl-all-in-one-${RELEASE_VERSION}.jar" ]; then
          find . -name "fxgl-${RELEASE_VERSION}.jar" -not -name "*sources*" -not -name "*javadoc*" -not -path "*/target/dependency/*" -exec cp {} release-artifacts/fxgl-all-in-one-${RELEASE_VERSION}.jar \;
        fi
        
        # List all artifacts for verification
        echo "=== Release artifacts ==="
        ls -la release-artifacts/
        echo "=========================="
        
    - name: Create Release and Upload Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release notes
        cat > release_notes.md << 'EOF'
        ## FXGL Java 17 Compatible Release v${{ env.RELEASE_VERSION }}
        
        ### All-in-One JAR
        - `fxgl-all-in-one-${{ env.RELEASE_VERSION }}.jar` - Complete FXGL framework in a single JAR
        
        ### Individual Module JARs
        - `fxgl-core-${{ env.RELEASE_VERSION }}.jar` - Core framework utilities
        - `fxgl-entity-${{ env.RELEASE_VERSION }}.jar` - Entity-Component-System and physics
        - `fxgl-io-${{ env.RELEASE_VERSION }}.jar` - Input/output and networking
        - `fxgl-scene-${{ env.RELEASE_VERSION }}.jar` - UI components and scene management
        - `fxgl-gameplay-${{ env.RELEASE_VERSION }}.jar` - High-level game features
        - `fxgl-controllerinput-${{ env.RELEASE_VERSION }}.jar` - Game controller support
        - `fxgl-intelligence-${{ env.RELEASE_VERSION }}.jar` - AI and pathfinding
        - `fxgl-tools-${{ env.RELEASE_VERSION }}.jar` - Development tools
        - `fxgl-test-${{ env.RELEASE_VERSION }}.jar` - Testing utilities
        - `fxgl-zdeploy-${{ env.RELEASE_VERSION }}.jar` - Deployment utilities
        
        ### Java 17 Compatibility
        This release is fully compatible with Java 17 LTS while maintaining API compatibility with the original FXGL framework.
        
        ### Usage
        Include the all-in-one JAR in your project or select individual modules as needed.
        EOF
        
        # Check if release already exists (for manual dispatch runs)
        if gh release view "v${{ env.RELEASE_VERSION }}" >/dev/null 2>&1; then
          echo "Release v${{ env.RELEASE_VERSION }} already exists. Uploading assets to existing release..."
        else
          echo "Creating new release v${{ env.RELEASE_VERSION }}..."
          gh release create "v${{ env.RELEASE_VERSION }}" \
            --title "FXGL v${{ env.RELEASE_VERSION }}" \
            --notes-file release_notes.md \
            --latest
        fi
        
        # Upload all JAR files from release-artifacts directory
        for jar in release-artifacts/*.jar; do
          if [[ -f "$jar" ]]; then
            filename=$(basename "$jar")
            echo "Uploading $filename..."
            gh release upload "v${{ env.RELEASE_VERSION }}" "$jar" --clobber
          fi
        done
        
        echo "Release v${{ env.RELEASE_VERSION }} created successfully with all artifacts!"